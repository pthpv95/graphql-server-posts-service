type Query {
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  post(id: String): Post!
  comments(query: String): [Comment!]!
  me: User!
  myPost(query: String!): [Post!]!
  sum(numbers: [Float!]): Float!
}

type Mutation {
  login(data: LoginUserInput!): AuthPayload!
  createUser(data: CreateUserInput): AuthPayload!
  createPost(data: CreatePostInput): Post!
  updatePost(data: UpdatePostInput, id: String!): Post!
  detelePost(id: String!): Post!
  createComment(data: CreateCommentInput!): Comment!
  deleteUser: User!
  deteleComment(id: String): Comment!
  updateComment(id: String!, data: UpdateCommentInput): Comment!
  updateUser(data: UpdateUserInput!): User!
}

type Subscription {
  myPost: PostSubscriptionPayload!
  post(id: String): PostSubscriptionPayload!
  comment(postId: String): CommentSubscriptionPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

# input type
input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}

input CreateCommentInput {
  text: String!
  post: String!
}

input UpdatePostInput {
  title: String!
  body: String!
  published: Boolean!
}

input UpdateCommentInput {
  text: String!
}

type User {
  id: ID!
  name: String!
  email: String
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
}

type AuthPayload {
  token: String!
  user: User!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  author: User!
  text: String!
  post: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post!
}
